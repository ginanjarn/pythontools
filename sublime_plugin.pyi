from typing import Any, Optional

api_ready: bool
deferred_plugin_loadeds: Any
application_command_classes: Any
window_command_classes: Any
text_command_classes: Any
view_event_listener_classes: Any
view_event_listeners: Any
all_command_classes: Any
all_callbacks: Any
pending_on_activated_async_lock: Any
pending_on_activated_async_callbacks: Any
profile: Any

def unload_module(module: Any) -> None: ...
def unload_plugin(modulename: Any) -> None: ...
def reload_plugin(modulename: Any) -> None: ...
def load_module(m: Any) -> None: ...
def synthesize_on_activated_async() -> None: ...
def create_application_commands() -> None: ...
def create_window_commands(window_id: Any): ...
def create_text_commands(view_id: Any): ...
def on_api_ready() -> None: ...
def is_view_event_listener_applicable(cls, view: Any): ...
def create_view_event_listeners(classes: Any, view: Any) -> None: ...
def check_view_event_listeners(view: Any) -> None: ...
def attach_view(view: Any): ...

check_all_view_event_listeners_scheduled: bool

def check_all_view_event_listeners() -> None: ...
def detach_view(view: Any) -> None: ...
def event_listeners_for_view(view: Any): ...
def find_view_event_listener(view: Any, cls: Any): ...
def on_new(view_id: Any) -> None: ...
def on_new_async(view_id: Any) -> None: ...
def on_clone(view_id: Any) -> None: ...
def on_clone_async(view_id: Any) -> None: ...

class Summary:
    max: float = ...
    sum: float = ...
    count: int = ...
    def __init__(self) -> None: ...
    def record(self, x: Any) -> None: ...

def run_callback(event: Any, callback: Any, expr: Any) -> None: ...
def run_view_listener_callback(view: Any, name: Any): ...
def run_async_view_listener_callback(view: Any, name: Any) -> None: ...
def on_load(view_id: Any): ...
def on_load_async(view_id: Any) -> None: ...
def on_pre_close(view_id: Any): ...
def on_close(view_id: Any): ...
def on_pre_save(view_id: Any): ...
def on_pre_save_async(view_id: Any) -> None: ...
def on_post_save(view_id: Any): ...
def on_post_save_async(view_id: Any) -> None: ...
def on_modified(view_id: Any): ...
def on_modified_async(view_id: Any) -> None: ...
def on_selection_modified(view_id: Any): ...
def on_selection_modified_async(view_id: Any) -> None: ...
def on_activated(view_id: Any): ...
def on_activated_async(view_id: Any) -> None: ...
def on_deactivated(view_id: Any): ...
def on_deactivated_async(view_id: Any) -> None: ...
def on_query_context(view_id: Any, key: Any, operator: Any, operand: Any, match_all: Any): ...
def normalise_completion(c: Any): ...
def on_query_completions(view_id: Any, prefix: Any, locations: Any): ...
def on_hover(view_id: Any, point: Any, hover_zone: Any): ...
def on_text_command(view_id: Any, name: Any, args: Any): ...
def on_window_command(window_id: Any, name: Any, args: Any): ...
def on_post_text_command(view_id: Any, name: Any, args: Any) -> None: ...
def on_post_window_command(window_id: Any, name: Any, args: Any) -> None: ...

class CommandInputHandler:
    def name(self): ...
    def next_input(self, args: Any) -> None: ...
    def placeholder(self): ...
    def initial_text(self): ...
    def preview(self, arg: Any): ...
    def validate(self, arg: Any): ...
    def cancel(self) -> None: ...
    def confirm(self, arg: Any) -> None: ...
    def create_input_handler_(self, args: Any): ...
    def preview_(self, v: Any): ...
    def validate_(self, v: Any): ...
    def cancel_(self) -> None: ...
    def confirm_(self, v: Any) -> None: ...

class BackInputHandler(CommandInputHandler):
    def name(self): ...

class TextInputHandler(CommandInputHandler):
    def description(self, text: Any): ...
    def setup_(self, args: Any): ...
    def description_(self, v: Any, text: Any): ...

class ListInputHandler(CommandInputHandler):
    def list_items(self): ...
    def description(self, v: Any, text: Any): ...
    def setup_(self, args: Any): ...
    def description_(self, v: Any, text: Any): ...

class Command:
    def name(self): ...
    def is_enabled_(self, args: Any): ...
    def is_enabled(self): ...
    def is_visible_(self, args: Any): ...
    def is_visible(self): ...
    def is_checked_(self, args: Any): ...
    def is_checked(self): ...
    def description_(self, args: Any): ...
    def description(self): ...
    def filter_args(self, args: Any): ...
    def want_event(self): ...
    def input(self, args: Any) -> None: ...
    def input_description(self): ...
    def create_input_handler_(self, args: Any): ...

class ApplicationCommand(Command):
    def run_(self, edit_token: Any, args: Any): ...
    def run(self) -> None: ...

class WindowCommand(Command):
    window: Any = ...
    def __init__(self, window: Any) -> None: ...
    def run_(self, edit_token: Any, args: Any): ...
    def run(self) -> None: ...

class TextCommand(Command):
    view: Any = ...
    def __init__(self, view: Any) -> None: ...
    def run_(self, edit_token: Any, args: Any): ...
    def run(self, edit: Any) -> None: ...

class EventListener: ...

class ViewEventListener:
    @classmethod
    def is_applicable(cls, settings: Any): ...
    @classmethod
    def applies_to_primary_view_only(cls): ...
    view: Any = ...
    def __init__(self, view: Any) -> None: ...

class MultizipImporter:
    loaders: Any = ...
    file_loaders: Any = ...
    def __init__(self) -> None: ...
    def find_module(self, fullname: Any, path: Optional[Any] = ...): ...

class ZipLoader:
    zippath: Any = ...
    name: Any = ...
    def __init__(self, zippath: Any) -> None: ...
    def has(self, fullname: Any): ...
    def load_module(self, fullname: Any): ...
    def get_source(self, fullname: Any): ...

override_path: Any
multi_importer: Any

def update_compressed_packages(pkgs: Any) -> None: ...
def set_override_path(path: Any) -> None: ...
